package org.policetracks.android.db;

import android.util.JsonReader;
import android.util.JsonToken;

import org.greenrobot.greendao.annotation.*;
import org.policetracks.android.messages.MessageIntervention;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

// KEEP INCLUDES END
/**
 * Entity mapped to table "INTERVENTION".
 */
@Entity
public class Intervention {

    @Id
    private Long id;

    @NotNull
    private String type;
    private String subtype;
    private String comment;
    private Long from;
    private Long to;
    private String created;

    @Generated(hash = 2043240241)
    public Intervention(Long id, @NotNull String type, String subtype, String comment, Long from, Long to,
            String created) {
        this.id = id;
        this.type = type;
        this.subtype = subtype;
        this.comment = comment;
        this.from = from;
        this.to = to;
        this.created = created;
    }

    @Generated(hash = 768626443)
    public Intervention() {
    }

    public Intervention(Long id) {
        this.id = id;
    }

    public Long getId() {
        return id;
    }

    public String getCreated() {
        return created;
    }

    public void setCreated(String created) {
        this.created = created;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSubtype() {
        return subtype;
    }

    public void setSubtype(String subtype) {
        this.subtype = subtype;
    }

    @NotNull
    public String getType() {
        return type;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setType(@NotNull String type) {
        this.type = type;
    }

    public String getComment() {
        return comment;
    }

    public void setComment(String comment) {
        this.comment = comment;
    }

    public Long getFrom() {
        return from;
    }

    public void setFrom(Long from) {
        this.from = from;
    }

    public Long getTo() {
        return to;
    }

    public void setTo(Long to) {
        this.to = to;
    }

    public void setDefaults() {
    }

    public static MessageIntervention[] readJsonStream(InputStream in) throws IOException {
        JsonReader reader = new JsonReader(new InputStreamReader(in, "UTF-8"));
        try {
            List<MessageIntervention> result = readInterventionsArray(reader);
            return result.toArray(new MessageIntervention[result.size()]);
        } finally {
            reader.close();
        }
    }

    public static List<MessageIntervention> readInterventionsArray(JsonReader reader) throws IOException {
        List<MessageIntervention> messages = new ArrayList<MessageIntervention>();

        reader.beginArray();
        while (reader.hasNext()) {
            Intervention iv = readIntervention(reader);
            if (iv == null) continue;
            MessageIntervention miv = MessageIntervention.fromDaoObject(iv);
            messages.add(miv);
        }
        reader.endArray();
        return messages;
    }

    public static Intervention readIntervention(JsonReader reader) throws IOException {
        String id = null;
        String type = null;
        String subtype = null;
        String comment = null;
        Long from = null;
        Long to = null;

        reader.beginObject();
        while (reader.hasNext()) {
            String name = reader.nextName();
            if (name.equals("type") && reader.peek() != JsonToken.NULL) {
                type = reader.nextString();
            } else if (name.equals("subtype") && reader.peek() != JsonToken.NULL) {
                subtype = reader.nextString();
            } else if (name.equals("id") && reader.peek() != JsonToken.NULL) {
                id = reader.nextString();
            } else if (name.equals("comment") && reader.peek() != JsonToken.NULL) {
                comment = reader.nextString();
            } else if (name.equals("from")&& reader.peek() != JsonToken.NULL) {
                from = reader.nextLong();
            } else if (name.equals("to")&& reader.peek() != JsonToken.NULL) {
                to = reader.nextLong();
            } else {
                reader.skipValue();
            }
        }
        reader.endObject();
        if (id != null && type != null) {
            Intervention iv = new Intervention();
            iv.setComment(comment);
            iv.setFrom(from);
            iv.setTo(to);
            iv.setId(Long.parseLong(id));
            iv.setType(type);
            iv.setSubtype(subtype);
            return iv;
        } else {
            return null;
        }
    }
}
